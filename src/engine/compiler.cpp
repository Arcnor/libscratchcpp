// SPDX-License-Identifier: Apache-2.0

#include "compiler.h"
#include "engine.h"
#include <cassert>
#include <iostream>

using namespace libscratchcpp;
using namespace vm;

/*! Constructs Compiler. */
Compiler::Compiler(Engine *engine, std::shared_ptr<Block> topLevelBlock) :
    m_engine(engine),
    m_block(topLevelBlock)
{
    assert(engine);
    assert(topLevelBlock);
}

/*! Compiles the script. Use bytecode() to read the generated bytecode. */
void Compiler::compile()
{
    // Add start instruction
    addInstruction(OP_START);

    while (m_block) {
        size_t substacks = m_substackTree.size();

        if (m_block->compileFunction())
            m_block->compile(this);
        else
            std::cout << "warning: unsupported block: " << m_block->opcode() << std::endl;

        if (substacks != m_substackTree.size())
            continue;

        if (m_block)
            m_block = m_block->next();

        if (!m_block && !m_substackTree.empty())
            substackEnd();
    }

    // Add end instruction (halt)
    addInstruction(OP_HALT);
}

/*! Returns the generated bytecode. */
const std::vector<unsigned int> &Compiler::bytecode() const
{
    return m_bytecode;
}

/*! Returns the list of constant input values. */
const std::vector<InputValue *> &Compiler::constInputValues() const
{
    return m_constValues;
}

/*! Returns the list of constant values. */
std::vector<Value> Compiler::constValues() const
{
    std::vector<Value> ret;
    for (auto value : m_constValues)
        ret.push_back(value->value());
    return ret;
}

/*! Sets the list of constant input values. */
void Compiler::setConstInputValues(const std::vector<InputValue *> &values)
{
    m_constValues = values;
}

/*! Returns the list of variables. */
const std::vector<Variable *> &Compiler::variables() const
{
    return m_variables;
}

/*! Returns the list of pointers to variable values. */
std::vector<Value *> Compiler::variablePtrs() const
{
    std::vector<Value *> ret;
    for (auto var : m_variables)
        ret.push_back(var->valuePtr());
    return ret;
}

/*! Sets the list of variables. */
void Compiler::setVariables(std::vector<Variable *> variables)
{
    m_variables = variables;
}

/*! Returns the list of lists. */
const std::vector<List *> &Compiler::lists() const
{
    return m_lists;
}

/*! Sets the list of lists. */
void Compiler::setLists(std::vector<List *> lists)
{
    m_lists = lists;
}

/*! Adds an instruction to the bytecode. */
void Compiler::addInstruction(Opcode opcode, std::initializer_list<unsigned int> args)
{
    m_bytecode.push_back(opcode);
    for (auto arg : args)
        m_bytecode.push_back(arg);
}

/*! Compiles the given input (resolved by ID) and adds it to the bytecode. */
void Compiler::addInput(int id)
{
    auto in = input(id);
    if (!in) {
        addInstruction(OP_NULL);
        return;
    }
    switch (in->type()) {
        case Input::Type::Shadow:
            addInstruction(OP_CONST, { constIndex(in->primaryValue()) });
            break;

        case Input::Type::NoShadow: {
            auto previousBlock = m_block;
            m_block = in->valueBlock();
            assert(m_block);
            if (m_block->compileFunction())
                m_block->compile(this);
            else {
                std::cout << "warning: unsupported reporter block: " << m_block->opcode() << std::endl;
                addInstruction(OP_NULL);
            }
            m_block = previousBlock;
            break;
        }

        case Input::Type::ObscuredShadow: {
            auto previousBlock = m_block;
            m_block = in->valueBlock();
            if (m_block) {
                if (m_block->compileFunction())
                    m_block->compile(this);
                else {
                    std::cout << "warning: unsupported reporter block: " << m_block->opcode() << std::endl;
                    addInstruction(OP_NULL);
                }
            } else
                in->primaryValue()->compile(this);
            m_block = previousBlock;
            break;
        }
    }
}

/*! Adds a function call to the bytecode (the OP_EXEC instruction). */
void Compiler::addFunctionCall(BlockFunc f)
{
    addInstruction(OP_EXEC, { m_engine->functionIndex(f) });
}

/*! Jumps to the given substack. The second substack is used for example for the if/else block. */
void Compiler::moveToSubstack(std::shared_ptr<Block> substack1, std::shared_ptr<Block> substack2, SubstackType type)
{
    m_substackTree.push_back({ { m_block, substack2 }, type });
    m_block = substack1;
    if (!m_block)
        substackEnd();
}

/*! Jumps to the given substack. */
void Compiler::moveToSubstack(std::shared_ptr<Block> substack, SubstackType type)
{
    moveToSubstack(substack, nullptr, type);
}

/*! Returns the input with the given ID. */
Input *Compiler::input(int id) const
{
    return m_block->findInputById(id);
}

/*! Returns the field with the given ID. */
Field *Compiler::field(int id) const
{
    return m_block->findFieldById(id);
}

/*! Returns the block in the given input. Same as input(id)->valueBlock(), but with a null pointer check. */
std::shared_ptr<Block> Compiler::inputBlock(int id) const
{
    auto in = input(id);
    return in ? in->valueBlock() : nullptr;
}

/*! Returns the index of the given variable. */
unsigned int Compiler::variableIndex(std::shared_ptr<IEntity> varEntity)
{
    auto var = dynamic_cast<Variable *>(varEntity.get());
    auto it = std::find(m_variables.begin(), m_variables.end(), var);
    if (it != m_variables.end())
        return it - m_variables.begin();
    m_variables.push_back(var);
    return m_variables.size() - 1;
}

/*! Returns the index of the given list. */
unsigned int Compiler::listIndex(std::shared_ptr<IEntity> listEntity)
{
    auto list = dynamic_cast<List *>(listEntity.get());
    auto it = std::find(m_lists.begin(), m_lists.end(), list);
    if (it != m_lists.end())
        return it - m_lists.begin();
    m_lists.push_back(list);
    return m_lists.size() - 1;
}

unsigned int Compiler::constIndex(InputValue *value)
{
    auto it = std::find(m_constValues.begin(), m_constValues.end(), value);
    if (it != m_constValues.end())
        return it - m_constValues.begin();
    m_constValues.push_back(value);
    return m_constValues.size() - 1;
}

/*! Returns the index of the procedure code of the given block. */
unsigned int Compiler::procedureIndex(std::string proc)
{
    auto it = std::find(m_procedures.begin(), m_procedures.end(), proc);
    if (it != m_procedures.end())
        return it - m_procedures.begin();
    m_procedures.push_back(proc);
    return m_procedures.size() - 1;
}

void Compiler::substackEnd()
{
    auto parent = m_substackTree.back();
    switch (parent.second) {
        case SubstackType::Loop:
            addInstruction(OP_LOOP_END);
            break;
        case SubstackType::IfStatement:
            if (parent.first.second) {
                addInstruction(OP_ELSE);
                m_block = parent.first.second;
                m_substackTree[m_substackTree.size() - 1].first.second = nullptr;
                return;
            } else
                addInstruction(OP_ENDIF);
            break;
    }
    m_block = parent.first.first->next();
    m_substackTree.pop_back();
    if (!m_block && !m_substackTree.empty())
        substackEnd();
}

/*! Returns the list of custom block prototypes. */
const std::vector<std::string> &Compiler::procedures() const
{
    return m_procedures;
}

/*! Sets the list of custom block prototypes. */
void Compiler::setProcedures(const std::vector<std::string> &newProcedures)
{
    m_procedures = newProcedures;
}

/*! Returns the current block. */
const std::shared_ptr<Block> &Compiler::block() const
{
    return m_block;
}
